#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



public partial class adminDataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void Insertpage(page instance);
  partial void Updatepage(page instance);
  partial void Deletepage(page instance);
  partial void Insertbanner(banner instance);
  partial void Updatebanner(banner instance);
  partial void Deletebanner(banner instance);
  partial void Insertlookup(lookup instance);
  partial void Updatelookup(lookup instance);
  partial void Deletelookup(lookup instance);
  #endregion
	
	public adminDataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ourDatabase"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public adminDataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public adminDataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public adminDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public adminDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<page> pages
	{
		get
		{
			return this.GetTable<page>();
		}
	}
	
	public System.Data.Linq.Table<banner> banners
	{
		get
		{
			return this.GetTable<banner>();
		}
	}
	
	public System.Data.Linq.Table<lookup> lookups
	{
		get
		{
			return this.GetTable<lookup>();
		}
	}
}

[Table(Name="dbo.page")]
public partial class page : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _page_key;
	
	private System.Nullable<int> _page_fkey;
	
	private string _pageid;
	
	private string _navtitle;
	
	private System.Nullable<char> _accesskey;
	
	private string _metadescription;
	
	private string _metakeywords;
	
	private string _title;
	
	private string _body;
	
	private string _thumbnailimage;
	
	private System.Nullable<bool> _showinnav;
	
	private System.Nullable<bool> _showinfeaturednav;
	
	private System.Nullable<bool> _showonhome;
	
	private System.Nullable<bool> _showinfooter;
	
	private System.Nullable<bool> _active;
	
	private System.Nullable<int> _sortorder;
	
	private string _linkurl;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onpage_keyChanging(int value);
    partial void Onpage_keyChanged();
    partial void Onpage_fkeyChanging(System.Nullable<int> value);
    partial void Onpage_fkeyChanged();
    partial void OnpageidChanging(string value);
    partial void OnpageidChanged();
    partial void OnnavtitleChanging(string value);
    partial void OnnavtitleChanged();
    partial void OnaccesskeyChanging(System.Nullable<char> value);
    partial void OnaccesskeyChanged();
    partial void OnmetadescriptionChanging(string value);
    partial void OnmetadescriptionChanged();
    partial void OnmetakeywordsChanging(string value);
    partial void OnmetakeywordsChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnbodyChanging(string value);
    partial void OnbodyChanged();
    partial void OnthumbnailimageChanging(string value);
    partial void OnthumbnailimageChanged();
    partial void OnshowinnavChanging(System.Nullable<bool> value);
    partial void OnshowinnavChanged();
    partial void OnshowinfeaturednavChanging(System.Nullable<bool> value);
    partial void OnshowinfeaturednavChanged();
    partial void OnshowonhomeChanging(System.Nullable<bool> value);
    partial void OnshowonhomeChanged();
    partial void OnshowinfooterChanging(System.Nullable<bool> value);
    partial void OnshowinfooterChanged();
    partial void OnactiveChanging(System.Nullable<bool> value);
    partial void OnactiveChanged();
    partial void OnsortorderChanging(System.Nullable<int> value);
    partial void OnsortorderChanged();
    partial void OnlinkurlChanging(string value);
    partial void OnlinkurlChanged();
    #endregion
	
	public page()
	{
		OnCreated();
	}
	
	[Column(Storage="_page_key", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int page_key
	{
		get
		{
			return this._page_key;
		}
		set
		{
			if ((this._page_key != value))
			{
				this.Onpage_keyChanging(value);
				this.SendPropertyChanging();
				this._page_key = value;
				this.SendPropertyChanged("page_key");
				this.Onpage_keyChanged();
			}
		}
	}
	
	[Column(Storage="_page_fkey", DbType="Int")]
	public System.Nullable<int> page_fkey
	{
		get
		{
			return this._page_fkey;
		}
		set
		{
			if ((this._page_fkey != value))
			{
				this.Onpage_fkeyChanging(value);
				this.SendPropertyChanging();
				this._page_fkey = value;
				this.SendPropertyChanged("page_fkey");
				this.Onpage_fkeyChanged();
			}
		}
	}
	
	[Column(Storage="_pageid", DbType="NVarChar(50)")]
	public string pageid
	{
		get
		{
			return this._pageid;
		}
		set
		{
			if ((this._pageid != value))
			{
				this.OnpageidChanging(value);
				this.SendPropertyChanging();
				this._pageid = value;
				this.SendPropertyChanged("pageid");
				this.OnpageidChanged();
			}
		}
	}
	
	[Column(Storage="_navtitle", DbType="NVarChar(50)")]
	public string navtitle
	{
		get
		{
			return this._navtitle;
		}
		set
		{
			if ((this._navtitle != value))
			{
				this.OnnavtitleChanging(value);
				this.SendPropertyChanging();
				this._navtitle = value;
				this.SendPropertyChanged("navtitle");
				this.OnnavtitleChanged();
			}
		}
	}
	
	[Column(Storage="_accesskey", DbType="NChar(1)")]
	public System.Nullable<char> accesskey
	{
		get
		{
			return this._accesskey;
		}
		set
		{
			if ((this._accesskey != value))
			{
				this.OnaccesskeyChanging(value);
				this.SendPropertyChanging();
				this._accesskey = value;
				this.SendPropertyChanged("accesskey");
				this.OnaccesskeyChanged();
			}
		}
	}
	
	[Column(Storage="_metadescription", DbType="NVarChar(MAX)")]
	public string metadescription
	{
		get
		{
			return this._metadescription;
		}
		set
		{
			if ((this._metadescription != value))
			{
				this.OnmetadescriptionChanging(value);
				this.SendPropertyChanging();
				this._metadescription = value;
				this.SendPropertyChanged("metadescription");
				this.OnmetadescriptionChanged();
			}
		}
	}
	
	[Column(Storage="_metakeywords", DbType="NVarChar(MAX)")]
	public string metakeywords
	{
		get
		{
			return this._metakeywords;
		}
		set
		{
			if ((this._metakeywords != value))
			{
				this.OnmetakeywordsChanging(value);
				this.SendPropertyChanging();
				this._metakeywords = value;
				this.SendPropertyChanged("metakeywords");
				this.OnmetakeywordsChanged();
			}
		}
	}
	
	[Column(Storage="_title", DbType="NVarChar(50)")]
	public string title
	{
		get
		{
			return this._title;
		}
		set
		{
			if ((this._title != value))
			{
				this.OntitleChanging(value);
				this.SendPropertyChanging();
				this._title = value;
				this.SendPropertyChanged("title");
				this.OntitleChanged();
			}
		}
	}
	
	[Column(Storage="_body", DbType="Text", UpdateCheck=UpdateCheck.Never)]
	public string body
	{
		get
		{
			return this._body;
		}
		set
		{
			if ((this._body != value))
			{
				this.OnbodyChanging(value);
				this.SendPropertyChanging();
				this._body = value;
				this.SendPropertyChanged("body");
				this.OnbodyChanged();
			}
		}
	}
	
	[Column(Storage="_thumbnailimage", DbType="NVarChar(128)")]
	public string thumbnailimage
	{
		get
		{
			return this._thumbnailimage;
		}
		set
		{
			if ((this._thumbnailimage != value))
			{
				this.OnthumbnailimageChanging(value);
				this.SendPropertyChanging();
				this._thumbnailimage = value;
				this.SendPropertyChanged("thumbnailimage");
				this.OnthumbnailimageChanged();
			}
		}
	}
	
	[Column(Storage="_showinnav", DbType="Bit")]
	public System.Nullable<bool> showinnav
	{
		get
		{
			return this._showinnav;
		}
		set
		{
			if ((this._showinnav != value))
			{
				this.OnshowinnavChanging(value);
				this.SendPropertyChanging();
				this._showinnav = value;
				this.SendPropertyChanged("showinnav");
				this.OnshowinnavChanged();
			}
		}
	}
	
	[Column(Storage="_showinfeaturednav", DbType="Bit")]
	public System.Nullable<bool> showinfeaturednav
	{
		get
		{
			return this._showinfeaturednav;
		}
		set
		{
			if ((this._showinfeaturednav != value))
			{
				this.OnshowinfeaturednavChanging(value);
				this.SendPropertyChanging();
				this._showinfeaturednav = value;
				this.SendPropertyChanged("showinfeaturednav");
				this.OnshowinfeaturednavChanged();
			}
		}
	}
	
	[Column(Storage="_showonhome", DbType="Bit")]
	public System.Nullable<bool> showonhome
	{
		get
		{
			return this._showonhome;
		}
		set
		{
			if ((this._showonhome != value))
			{
				this.OnshowonhomeChanging(value);
				this.SendPropertyChanging();
				this._showonhome = value;
				this.SendPropertyChanged("showonhome");
				this.OnshowonhomeChanged();
			}
		}
	}
	
	[Column(Storage="_showinfooter", DbType="Bit")]
	public System.Nullable<bool> showinfooter
	{
		get
		{
			return this._showinfooter;
		}
		set
		{
			if ((this._showinfooter != value))
			{
				this.OnshowinfooterChanging(value);
				this.SendPropertyChanging();
				this._showinfooter = value;
				this.SendPropertyChanged("showinfooter");
				this.OnshowinfooterChanged();
			}
		}
	}
	
	[Column(Storage="_active", DbType="Bit")]
	public System.Nullable<bool> active
	{
		get
		{
			return this._active;
		}
		set
		{
			if ((this._active != value))
			{
				this.OnactiveChanging(value);
				this.SendPropertyChanging();
				this._active = value;
				this.SendPropertyChanged("active");
				this.OnactiveChanged();
			}
		}
	}
	
	[Column(Storage="_sortorder", DbType="Int")]
	public System.Nullable<int> sortorder
	{
		get
		{
			return this._sortorder;
		}
		set
		{
			if ((this._sortorder != value))
			{
				this.OnsortorderChanging(value);
				this.SendPropertyChanging();
				this._sortorder = value;
				this.SendPropertyChanged("sortorder");
				this.OnsortorderChanged();
			}
		}
	}
	
	[Column(Storage="_linkurl", DbType="NVarChar(50)")]
	public string linkurl
	{
		get
		{
			return this._linkurl;
		}
		set
		{
			if ((this._linkurl != value))
			{
				this.OnlinkurlChanging(value);
				this.SendPropertyChanging();
				this._linkurl = value;
				this.SendPropertyChanged("linkurl");
				this.OnlinkurlChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.banners")]
public partial class banner : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _bannerdid;
	
	private string _name;
	
	private string _image;
	
	private string _alttext;
	
	private string _url;
	
	private string _category;
	
	private int _randomness;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnbannerdidChanging(int value);
    partial void OnbannerdidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnimageChanging(string value);
    partial void OnimageChanged();
    partial void OnalttextChanging(string value);
    partial void OnalttextChanged();
    partial void OnurlChanging(string value);
    partial void OnurlChanged();
    partial void OncategoryChanging(string value);
    partial void OncategoryChanged();
    partial void OnrandomnessChanging(int value);
    partial void OnrandomnessChanged();
    #endregion
	
	public banner()
	{
		OnCreated();
	}
	
	[Column(Storage="_bannerdid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int bannerdid
	{
		get
		{
			return this._bannerdid;
		}
		set
		{
			if ((this._bannerdid != value))
			{
				this.OnbannerdidChanging(value);
				this.SendPropertyChanging();
				this._bannerdid = value;
				this.SendPropertyChanged("bannerdid");
				this.OnbannerdidChanged();
			}
		}
	}
	
	[Column(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[Column(Storage="_image", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
	public string image
	{
		get
		{
			return this._image;
		}
		set
		{
			if ((this._image != value))
			{
				this.OnimageChanging(value);
				this.SendPropertyChanging();
				this._image = value;
				this.SendPropertyChanged("image");
				this.OnimageChanged();
			}
		}
	}
	
	[Column(Storage="_alttext", DbType="NVarChar(MAX)")]
	public string alttext
	{
		get
		{
			return this._alttext;
		}
		set
		{
			if ((this._alttext != value))
			{
				this.OnalttextChanging(value);
				this.SendPropertyChanging();
				this._alttext = value;
				this.SendPropertyChanged("alttext");
				this.OnalttextChanged();
			}
		}
	}
	
	[Column(Storage="_url", DbType="NVarChar(255)")]
	public string url
	{
		get
		{
			return this._url;
		}
		set
		{
			if ((this._url != value))
			{
				this.OnurlChanging(value);
				this.SendPropertyChanging();
				this._url = value;
				this.SendPropertyChanged("url");
				this.OnurlChanged();
			}
		}
	}
	
	[Column(Storage="_category", DbType="NVarChar(20)")]
	public string category
	{
		get
		{
			return this._category;
		}
		set
		{
			if ((this._category != value))
			{
				this.OncategoryChanging(value);
				this.SendPropertyChanging();
				this._category = value;
				this.SendPropertyChanged("category");
				this.OncategoryChanged();
			}
		}
	}
	
	[Column(Storage="_randomness", DbType="Int NOT NULL")]
	public int randomness
	{
		get
		{
			return this._randomness;
		}
		set
		{
			if ((this._randomness != value))
			{
				this.OnrandomnessChanging(value);
				this.SendPropertyChanging();
				this._randomness = value;
				this.SendPropertyChanged("randomness");
				this.OnrandomnessChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.lookup")]
public partial class lookup : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _lookup_key;
	
	private string _lookup_id;
	
	private string _title;
	
	private string _type;
	
	private string _value;
	
	private byte _active;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onlookup_keyChanging(int value);
    partial void Onlookup_keyChanged();
    partial void Onlookup_idChanging(string value);
    partial void Onlookup_idChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    partial void OnactiveChanging(byte value);
    partial void OnactiveChanged();
    #endregion
	
	public lookup()
	{
		OnCreated();
	}
	
	[Column(Storage="_lookup_key", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int lookup_key
	{
		get
		{
			return this._lookup_key;
		}
		set
		{
			if ((this._lookup_key != value))
			{
				this.Onlookup_keyChanging(value);
				this.SendPropertyChanging();
				this._lookup_key = value;
				this.SendPropertyChanged("lookup_key");
				this.Onlookup_keyChanged();
			}
		}
	}
	
	[Column(Storage="_lookup_id", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string lookup_id
	{
		get
		{
			return this._lookup_id;
		}
		set
		{
			if ((this._lookup_id != value))
			{
				this.Onlookup_idChanging(value);
				this.SendPropertyChanging();
				this._lookup_id = value;
				this.SendPropertyChanged("lookup_id");
				this.Onlookup_idChanged();
			}
		}
	}
	
	[Column(Storage="_title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string title
	{
		get
		{
			return this._title;
		}
		set
		{
			if ((this._title != value))
			{
				this.OntitleChanging(value);
				this.SendPropertyChanging();
				this._title = value;
				this.SendPropertyChanged("title");
				this.OntitleChanged();
			}
		}
	}
	
	[Column(Storage="_type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string type
	{
		get
		{
			return this._type;
		}
		set
		{
			if ((this._type != value))
			{
				this.OntypeChanging(value);
				this.SendPropertyChanging();
				this._type = value;
				this.SendPropertyChanged("type");
				this.OntypeChanged();
			}
		}
	}
	
	[Column(Storage="_value", DbType="Text", UpdateCheck=UpdateCheck.Never)]
	public string value
	{
		get
		{
			return this._value;
		}
		set
		{
			if ((this._value != value))
			{
				this.OnvalueChanging(value);
				this.SendPropertyChanging();
				this._value = value;
				this.SendPropertyChanged("value");
				this.OnvalueChanged();
			}
		}
	}
	
	[Column(Storage="_active", DbType="TinyInt NOT NULL")]
	public byte active
	{
		get
		{
			return this._active;
		}
		set
		{
			if ((this._active != value))
			{
				this.OnactiveChanging(value);
				this.SendPropertyChanging();
				this._active = value;
				this.SendPropertyChanged("active");
				this.OnactiveChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
