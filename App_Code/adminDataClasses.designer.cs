#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[System.Data.Linq.Mapping.DatabaseAttribute(Name="Emmanuel")]
public partial class adminDataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void Insertpage(page instance);
  partial void Updatepage(page instance);
  partial void Deletepage(page instance);
  partial void Insertbanner(banner instance);
  partial void Updatebanner(banner instance);
  partial void Deletebanner(banner instance);
  partial void Insertlookup(lookup instance);
  partial void Updatelookup(lookup instance);
  partial void Deletelookup(lookup instance);
  partial void Insertarticle_category(article_category instance);
  partial void Updatearticle_category(article_category instance);
  partial void Deletearticle_category(article_category instance);
  partial void Insertarticle(article instance);
  partial void Updatearticle(article instance);
  partial void Deletearticle(article instance);
  partial void InsertNewsletterReciprient(NewsletterReciprient instance);
  partial void UpdateNewsletterReciprient(NewsletterReciprient instance);
  partial void DeleteNewsletterReciprient(NewsletterReciprient instance);
  partial void InsertNewsletter(Newsletter instance);
  partial void UpdateNewsletter(Newsletter instance);
  partial void DeleteNewsletter(Newsletter instance);
  partial void InsertNewsletter_Link(Newsletter_Link instance);
  partial void UpdateNewsletter_Link(Newsletter_Link instance);
  partial void DeleteNewsletter_Link(Newsletter_Link instance);
  #endregion
	
	public adminDataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["EmmanuelConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public adminDataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public adminDataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public adminDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public adminDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<page> pages
	{
		get
		{
			return this.GetTable<page>();
		}
	}
	
	public System.Data.Linq.Table<banner> banners
	{
		get
		{
			return this.GetTable<banner>();
		}
	}
	
	public System.Data.Linq.Table<lookup> lookups
	{
		get
		{
			return this.GetTable<lookup>();
		}
	}
	
	public System.Data.Linq.Table<article_category> article_categories
	{
		get
		{
			return this.GetTable<article_category>();
		}
	}
	
	public System.Data.Linq.Table<article> articles
	{
		get
		{
			return this.GetTable<article>();
		}
	}
	
	public System.Data.Linq.Table<NewsletterReciprient> NewsletterReciprients
	{
		get
		{
			return this.GetTable<NewsletterReciprient>();
		}
	}
	
	public System.Data.Linq.Table<Newsletter> Newsletters
	{
		get
		{
			return this.GetTable<Newsletter>();
		}
	}
	
	public System.Data.Linq.Table<Newsletter_Link> Newsletter_Links
	{
		get
		{
			return this.GetTable<Newsletter_Link>();
		}
	}
}

[Table(Name="dbo.page")]
public partial class page : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _page_key;
	
	private System.Nullable<int> _page_fkey;
	
	private string _pageid;
	
	private string _navtitle;
	
	private System.Nullable<char> _accesskey;
	
	private string _metadescription;
	
	private string _metakeywords;
	
	private string _title;
	
	private string _body;
	
	private string _thumbnailimage;
	
	private System.Nullable<bool> _showinnav;
	
	private System.Nullable<bool> _showinfeaturednav;
	
	private System.Nullable<bool> _showonhome;
	
	private System.Nullable<bool> _showinfooter;
	
	private System.Nullable<bool> _active;
	
	private System.Nullable<int> _sortorder;
	
	private string _linkurl;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onpage_keyChanging(int value);
    partial void Onpage_keyChanged();
    partial void Onpage_fkeyChanging(System.Nullable<int> value);
    partial void Onpage_fkeyChanged();
    partial void OnpageidChanging(string value);
    partial void OnpageidChanged();
    partial void OnnavtitleChanging(string value);
    partial void OnnavtitleChanged();
    partial void OnaccesskeyChanging(System.Nullable<char> value);
    partial void OnaccesskeyChanged();
    partial void OnmetadescriptionChanging(string value);
    partial void OnmetadescriptionChanged();
    partial void OnmetakeywordsChanging(string value);
    partial void OnmetakeywordsChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnbodyChanging(string value);
    partial void OnbodyChanged();
    partial void OnthumbnailimageChanging(string value);
    partial void OnthumbnailimageChanged();
    partial void OnshowinnavChanging(System.Nullable<bool> value);
    partial void OnshowinnavChanged();
    partial void OnshowinfeaturednavChanging(System.Nullable<bool> value);
    partial void OnshowinfeaturednavChanged();
    partial void OnshowonhomeChanging(System.Nullable<bool> value);
    partial void OnshowonhomeChanged();
    partial void OnshowinfooterChanging(System.Nullable<bool> value);
    partial void OnshowinfooterChanged();
    partial void OnactiveChanging(System.Nullable<bool> value);
    partial void OnactiveChanged();
    partial void OnsortorderChanging(System.Nullable<int> value);
    partial void OnsortorderChanged();
    partial void OnlinkurlChanging(string value);
    partial void OnlinkurlChanged();
    #endregion
	
	public page()
	{
		OnCreated();
	}
	
	[Column(Storage="_page_key", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int page_key
	{
		get
		{
			return this._page_key;
		}
		set
		{
			if ((this._page_key != value))
			{
				this.Onpage_keyChanging(value);
				this.SendPropertyChanging();
				this._page_key = value;
				this.SendPropertyChanged("page_key");
				this.Onpage_keyChanged();
			}
		}
	}
	
	[Column(Storage="_page_fkey", DbType="Int")]
	public System.Nullable<int> page_fkey
	{
		get
		{
			return this._page_fkey;
		}
		set
		{
			if ((this._page_fkey != value))
			{
				this.Onpage_fkeyChanging(value);
				this.SendPropertyChanging();
				this._page_fkey = value;
				this.SendPropertyChanged("page_fkey");
				this.Onpage_fkeyChanged();
			}
		}
	}
	
	[Column(Storage="_pageid", DbType="NVarChar(50)")]
	public string pageid
	{
		get
		{
			return this._pageid;
		}
		set
		{
			if ((this._pageid != value))
			{
				this.OnpageidChanging(value);
				this.SendPropertyChanging();
				this._pageid = value;
				this.SendPropertyChanged("pageid");
				this.OnpageidChanged();
			}
		}
	}
	
	[Column(Storage="_navtitle", DbType="NVarChar(50)")]
	public string navtitle
	{
		get
		{
			return this._navtitle;
		}
		set
		{
			if ((this._navtitle != value))
			{
				this.OnnavtitleChanging(value);
				this.SendPropertyChanging();
				this._navtitle = value;
				this.SendPropertyChanged("navtitle");
				this.OnnavtitleChanged();
			}
		}
	}
	
	[Column(Storage="_accesskey", DbType="NChar(1)")]
	public System.Nullable<char> accesskey
	{
		get
		{
			return this._accesskey;
		}
		set
		{
			if ((this._accesskey != value))
			{
				this.OnaccesskeyChanging(value);
				this.SendPropertyChanging();
				this._accesskey = value;
				this.SendPropertyChanged("accesskey");
				this.OnaccesskeyChanged();
			}
		}
	}
	
	[Column(Storage="_metadescription", DbType="NVarChar(MAX)")]
	public string metadescription
	{
		get
		{
			return this._metadescription;
		}
		set
		{
			if ((this._metadescription != value))
			{
				this.OnmetadescriptionChanging(value);
				this.SendPropertyChanging();
				this._metadescription = value;
				this.SendPropertyChanged("metadescription");
				this.OnmetadescriptionChanged();
			}
		}
	}
	
	[Column(Storage="_metakeywords", DbType="NVarChar(MAX)")]
	public string metakeywords
	{
		get
		{
			return this._metakeywords;
		}
		set
		{
			if ((this._metakeywords != value))
			{
				this.OnmetakeywordsChanging(value);
				this.SendPropertyChanging();
				this._metakeywords = value;
				this.SendPropertyChanged("metakeywords");
				this.OnmetakeywordsChanged();
			}
		}
	}
	
	[Column(Storage="_title", DbType="NVarChar(50)")]
	public string title
	{
		get
		{
			return this._title;
		}
		set
		{
			if ((this._title != value))
			{
				this.OntitleChanging(value);
				this.SendPropertyChanging();
				this._title = value;
				this.SendPropertyChanged("title");
				this.OntitleChanged();
			}
		}
	}
	
	[Column(Storage="_body", DbType="Text", UpdateCheck=UpdateCheck.Never)]
	public string body
	{
		get
		{
			return this._body;
		}
		set
		{
			if ((this._body != value))
			{
				this.OnbodyChanging(value);
				this.SendPropertyChanging();
				this._body = value;
				this.SendPropertyChanged("body");
				this.OnbodyChanged();
			}
		}
	}
	
	[Column(Storage="_thumbnailimage", DbType="NVarChar(128)")]
	public string thumbnailimage
	{
		get
		{
			return this._thumbnailimage;
		}
		set
		{
			if ((this._thumbnailimage != value))
			{
				this.OnthumbnailimageChanging(value);
				this.SendPropertyChanging();
				this._thumbnailimage = value;
				this.SendPropertyChanged("thumbnailimage");
				this.OnthumbnailimageChanged();
			}
		}
	}
	
	[Column(Storage="_showinnav", DbType="Bit")]
	public System.Nullable<bool> showinnav
	{
		get
		{
			return this._showinnav;
		}
		set
		{
			if ((this._showinnav != value))
			{
				this.OnshowinnavChanging(value);
				this.SendPropertyChanging();
				this._showinnav = value;
				this.SendPropertyChanged("showinnav");
				this.OnshowinnavChanged();
			}
		}
	}
	
	[Column(Storage="_showinfeaturednav", DbType="Bit")]
	public System.Nullable<bool> showinfeaturednav
	{
		get
		{
			return this._showinfeaturednav;
		}
		set
		{
			if ((this._showinfeaturednav != value))
			{
				this.OnshowinfeaturednavChanging(value);
				this.SendPropertyChanging();
				this._showinfeaturednav = value;
				this.SendPropertyChanged("showinfeaturednav");
				this.OnshowinfeaturednavChanged();
			}
		}
	}
	
	[Column(Storage="_showonhome", DbType="Bit")]
	public System.Nullable<bool> showonhome
	{
		get
		{
			return this._showonhome;
		}
		set
		{
			if ((this._showonhome != value))
			{
				this.OnshowonhomeChanging(value);
				this.SendPropertyChanging();
				this._showonhome = value;
				this.SendPropertyChanged("showonhome");
				this.OnshowonhomeChanged();
			}
		}
	}
	
	[Column(Storage="_showinfooter", DbType="Bit")]
	public System.Nullable<bool> showinfooter
	{
		get
		{
			return this._showinfooter;
		}
		set
		{
			if ((this._showinfooter != value))
			{
				this.OnshowinfooterChanging(value);
				this.SendPropertyChanging();
				this._showinfooter = value;
				this.SendPropertyChanged("showinfooter");
				this.OnshowinfooterChanged();
			}
		}
	}
	
	[Column(Storage="_active", DbType="Bit")]
	public System.Nullable<bool> active
	{
		get
		{
			return this._active;
		}
		set
		{
			if ((this._active != value))
			{
				this.OnactiveChanging(value);
				this.SendPropertyChanging();
				this._active = value;
				this.SendPropertyChanged("active");
				this.OnactiveChanged();
			}
		}
	}
	
	[Column(Storage="_sortorder", DbType="Int")]
	public System.Nullable<int> sortorder
	{
		get
		{
			return this._sortorder;
		}
		set
		{
			if ((this._sortorder != value))
			{
				this.OnsortorderChanging(value);
				this.SendPropertyChanging();
				this._sortorder = value;
				this.SendPropertyChanged("sortorder");
				this.OnsortorderChanged();
			}
		}
	}
	
	[Column(Storage="_linkurl", DbType="NVarChar(50)")]
	public string linkurl
	{
		get
		{
			return this._linkurl;
		}
		set
		{
			if ((this._linkurl != value))
			{
				this.OnlinkurlChanging(value);
				this.SendPropertyChanging();
				this._linkurl = value;
				this.SendPropertyChanged("linkurl");
				this.OnlinkurlChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.banners")]
public partial class banner : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _bannerdid;
	
	private string _name;
	
	private string _image;
	
	private string _alttext;
	
	private string _url;
	
	private string _category;
	
	private int _randomness;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnbannerdidChanging(int value);
    partial void OnbannerdidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnimageChanging(string value);
    partial void OnimageChanged();
    partial void OnalttextChanging(string value);
    partial void OnalttextChanged();
    partial void OnurlChanging(string value);
    partial void OnurlChanged();
    partial void OncategoryChanging(string value);
    partial void OncategoryChanged();
    partial void OnrandomnessChanging(int value);
    partial void OnrandomnessChanged();
    #endregion
	
	public banner()
	{
		OnCreated();
	}
	
	[Column(Storage="_bannerdid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int bannerdid
	{
		get
		{
			return this._bannerdid;
		}
		set
		{
			if ((this._bannerdid != value))
			{
				this.OnbannerdidChanging(value);
				this.SendPropertyChanging();
				this._bannerdid = value;
				this.SendPropertyChanged("bannerdid");
				this.OnbannerdidChanged();
			}
		}
	}
	
	[Column(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[Column(Storage="_image", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
	public string image
	{
		get
		{
			return this._image;
		}
		set
		{
			if ((this._image != value))
			{
				this.OnimageChanging(value);
				this.SendPropertyChanging();
				this._image = value;
				this.SendPropertyChanged("image");
				this.OnimageChanged();
			}
		}
	}
	
	[Column(Storage="_alttext", DbType="NVarChar(MAX)")]
	public string alttext
	{
		get
		{
			return this._alttext;
		}
		set
		{
			if ((this._alttext != value))
			{
				this.OnalttextChanging(value);
				this.SendPropertyChanging();
				this._alttext = value;
				this.SendPropertyChanged("alttext");
				this.OnalttextChanged();
			}
		}
	}
	
	[Column(Storage="_url", DbType="NVarChar(255)")]
	public string url
	{
		get
		{
			return this._url;
		}
		set
		{
			if ((this._url != value))
			{
				this.OnurlChanging(value);
				this.SendPropertyChanging();
				this._url = value;
				this.SendPropertyChanged("url");
				this.OnurlChanged();
			}
		}
	}
	
	[Column(Storage="_category", DbType="NVarChar(20)")]
	public string category
	{
		get
		{
			return this._category;
		}
		set
		{
			if ((this._category != value))
			{
				this.OncategoryChanging(value);
				this.SendPropertyChanging();
				this._category = value;
				this.SendPropertyChanged("category");
				this.OncategoryChanged();
			}
		}
	}
	
	[Column(Storage="_randomness", DbType="Int NOT NULL")]
	public int randomness
	{
		get
		{
			return this._randomness;
		}
		set
		{
			if ((this._randomness != value))
			{
				this.OnrandomnessChanging(value);
				this.SendPropertyChanging();
				this._randomness = value;
				this.SendPropertyChanged("randomness");
				this.OnrandomnessChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.lookup")]
public partial class lookup : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _lookup_key;
	
	private string _lookup_id;
	
	private string _title;
	
	private string _type;
	
	private string _value;
	
	private byte _active;
	
	private EntitySet<article_category> _article_categories;
	
	private EntitySet<Newsletter_Link> _Newsletter_Links;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onlookup_keyChanging(int value);
    partial void Onlookup_keyChanged();
    partial void Onlookup_idChanging(string value);
    partial void Onlookup_idChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    partial void OnactiveChanging(byte value);
    partial void OnactiveChanged();
    #endregion
	
	public lookup()
	{
		this._article_categories = new EntitySet<article_category>(new Action<article_category>(this.attach_article_categories), new Action<article_category>(this.detach_article_categories));
		this._Newsletter_Links = new EntitySet<Newsletter_Link>(new Action<Newsletter_Link>(this.attach_Newsletter_Links), new Action<Newsletter_Link>(this.detach_Newsletter_Links));
		OnCreated();
	}
	
	[Column(Storage="_lookup_key", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int lookup_key
	{
		get
		{
			return this._lookup_key;
		}
		set
		{
			if ((this._lookup_key != value))
			{
				this.Onlookup_keyChanging(value);
				this.SendPropertyChanging();
				this._lookup_key = value;
				this.SendPropertyChanged("lookup_key");
				this.Onlookup_keyChanged();
			}
		}
	}
	
	[Column(Storage="_lookup_id", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string lookup_id
	{
		get
		{
			return this._lookup_id;
		}
		set
		{
			if ((this._lookup_id != value))
			{
				this.Onlookup_idChanging(value);
				this.SendPropertyChanging();
				this._lookup_id = value;
				this.SendPropertyChanged("lookup_id");
				this.Onlookup_idChanged();
			}
		}
	}
	
	[Column(Storage="_title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string title
	{
		get
		{
			return this._title;
		}
		set
		{
			if ((this._title != value))
			{
				this.OntitleChanging(value);
				this.SendPropertyChanging();
				this._title = value;
				this.SendPropertyChanged("title");
				this.OntitleChanged();
			}
		}
	}
	
	[Column(Storage="_type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string type
	{
		get
		{
			return this._type;
		}
		set
		{
			if ((this._type != value))
			{
				this.OntypeChanging(value);
				this.SendPropertyChanging();
				this._type = value;
				this.SendPropertyChanged("type");
				this.OntypeChanged();
			}
		}
	}
	
	[Column(Storage="_value", DbType="Text", UpdateCheck=UpdateCheck.Never)]
	public string value
	{
		get
		{
			return this._value;
		}
		set
		{
			if ((this._value != value))
			{
				this.OnvalueChanging(value);
				this.SendPropertyChanging();
				this._value = value;
				this.SendPropertyChanged("value");
				this.OnvalueChanged();
			}
		}
	}
	
	[Column(Storage="_active", DbType="TinyInt NOT NULL")]
	public byte active
	{
		get
		{
			return this._active;
		}
		set
		{
			if ((this._active != value))
			{
				this.OnactiveChanging(value);
				this.SendPropertyChanging();
				this._active = value;
				this.SendPropertyChanged("active");
				this.OnactiveChanged();
			}
		}
	}
	
	[Association(Name="lookup_article_category", Storage="_article_categories", ThisKey="lookup_key", OtherKey="category_fkey")]
	public EntitySet<article_category> article_categories
	{
		get
		{
			return this._article_categories;
		}
		set
		{
			this._article_categories.Assign(value);
		}
	}
	
	[Association(Name="lookup_Newsletter_Link", Storage="_Newsletter_Links", ThisKey="lookup_key", OtherKey="link_type_key")]
	public EntitySet<Newsletter_Link> Newsletter_Links
	{
		get
		{
			return this._Newsletter_Links;
		}
		set
		{
			this._Newsletter_Links.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_article_categories(article_category entity)
	{
		this.SendPropertyChanging();
		entity.lookup = this;
	}
	
	private void detach_article_categories(article_category entity)
	{
		this.SendPropertyChanging();
		entity.lookup = null;
	}
	
	private void attach_Newsletter_Links(Newsletter_Link entity)
	{
		this.SendPropertyChanging();
		entity.lookup = this;
	}
	
	private void detach_Newsletter_Links(Newsletter_Link entity)
	{
		this.SendPropertyChanging();
		entity.lookup = null;
	}
}

[Table(Name="dbo.article_categories")]
public partial class article_category : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _artcat_key;
	
	private int _article_fkey;
	
	private int _category_fkey;
	
	private EntityRef<lookup> _lookup;
	
	private EntityRef<article> _article;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onartcat_keyChanging(int value);
    partial void Onartcat_keyChanged();
    partial void Onarticle_fkeyChanging(int value);
    partial void Onarticle_fkeyChanged();
    partial void Oncategory_fkeyChanging(int value);
    partial void Oncategory_fkeyChanged();
    #endregion
	
	public article_category()
	{
		this._lookup = default(EntityRef<lookup>);
		this._article = default(EntityRef<article>);
		OnCreated();
	}
	
	[Column(Storage="_artcat_key", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int artcat_key
	{
		get
		{
			return this._artcat_key;
		}
		set
		{
			if ((this._artcat_key != value))
			{
				this.Onartcat_keyChanging(value);
				this.SendPropertyChanging();
				this._artcat_key = value;
				this.SendPropertyChanged("artcat_key");
				this.Onartcat_keyChanged();
			}
		}
	}
	
	[Column(Storage="_article_fkey", DbType="Int NOT NULL")]
	public int article_fkey
	{
		get
		{
			return this._article_fkey;
		}
		set
		{
			if ((this._article_fkey != value))
			{
				if (this._article.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onarticle_fkeyChanging(value);
				this.SendPropertyChanging();
				this._article_fkey = value;
				this.SendPropertyChanged("article_fkey");
				this.Onarticle_fkeyChanged();
			}
		}
	}
	
	[Column(Storage="_category_fkey", DbType="Int NOT NULL")]
	public int category_fkey
	{
		get
		{
			return this._category_fkey;
		}
		set
		{
			if ((this._category_fkey != value))
			{
				if (this._lookup.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Oncategory_fkeyChanging(value);
				this.SendPropertyChanging();
				this._category_fkey = value;
				this.SendPropertyChanged("category_fkey");
				this.Oncategory_fkeyChanged();
			}
		}
	}
	
	[Association(Name="lookup_article_category", Storage="_lookup", ThisKey="category_fkey", OtherKey="lookup_key", IsForeignKey=true)]
	public lookup lookup
	{
		get
		{
			return this._lookup.Entity;
		}
		set
		{
			lookup previousValue = this._lookup.Entity;
			if (((previousValue != value) 
						|| (this._lookup.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._lookup.Entity = null;
					previousValue.article_categories.Remove(this);
				}
				this._lookup.Entity = value;
				if ((value != null))
				{
					value.article_categories.Add(this);
					this._category_fkey = value.lookup_key;
				}
				else
				{
					this._category_fkey = default(int);
				}
				this.SendPropertyChanged("lookup");
			}
		}
	}
	
	[Association(Name="article_article_category", Storage="_article", ThisKey="article_fkey", OtherKey="article_key", IsForeignKey=true)]
	public article article
	{
		get
		{
			return this._article.Entity;
		}
		set
		{
			article previousValue = this._article.Entity;
			if (((previousValue != value) 
						|| (this._article.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._article.Entity = null;
					previousValue.article_categories.Remove(this);
				}
				this._article.Entity = value;
				if ((value != null))
				{
					value.article_categories.Add(this);
					this._article_fkey = value.article_key;
				}
				else
				{
					this._article_fkey = default(int);
				}
				this.SendPropertyChanged("article");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.articles")]
public partial class article : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _article_key;
	
	private string _title;
	
	private string _body;
	
	private string _shortdescription;
	
	private string _thumbnailimage;
	
	private bool _acitve;
	
	private int _sortorder;
	
	private System.Nullable<System.DateTime> _startdate;
	
	private System.Nullable<System.DateTime> _enddate;
	
	private EntitySet<article_category> _article_categories;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onarticle_keyChanging(int value);
    partial void Onarticle_keyChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnbodyChanging(string value);
    partial void OnbodyChanged();
    partial void OnshortdescriptionChanging(string value);
    partial void OnshortdescriptionChanged();
    partial void OnthumbnailimageChanging(string value);
    partial void OnthumbnailimageChanged();
    partial void OnacitveChanging(bool value);
    partial void OnacitveChanged();
    partial void OnsortorderChanging(int value);
    partial void OnsortorderChanged();
    partial void OnstartdateChanging(System.Nullable<System.DateTime> value);
    partial void OnstartdateChanged();
    partial void OnenddateChanging(System.Nullable<System.DateTime> value);
    partial void OnenddateChanged();
    #endregion
	
	public article()
	{
		this._article_categories = new EntitySet<article_category>(new Action<article_category>(this.attach_article_categories), new Action<article_category>(this.detach_article_categories));
		OnCreated();
	}
	
	[Column(Storage="_article_key", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int article_key
	{
		get
		{
			return this._article_key;
		}
		set
		{
			if ((this._article_key != value))
			{
				this.Onarticle_keyChanging(value);
				this.SendPropertyChanging();
				this._article_key = value;
				this.SendPropertyChanged("article_key");
				this.Onarticle_keyChanged();
			}
		}
	}
	
	[Column(Storage="_title", DbType="NVarChar(50)")]
	public string title
	{
		get
		{
			return this._title;
		}
		set
		{
			if ((this._title != value))
			{
				this.OntitleChanging(value);
				this.SendPropertyChanging();
				this._title = value;
				this.SendPropertyChanged("title");
				this.OntitleChanged();
			}
		}
	}
	
	[Column(Storage="_body", DbType="Text", UpdateCheck=UpdateCheck.Never)]
	public string body
	{
		get
		{
			return this._body;
		}
		set
		{
			if ((this._body != value))
			{
				this.OnbodyChanging(value);
				this.SendPropertyChanging();
				this._body = value;
				this.SendPropertyChanged("body");
				this.OnbodyChanged();
			}
		}
	}
	
	[Column(Storage="_shortdescription", DbType="NVarChar(MAX)")]
	public string shortdescription
	{
		get
		{
			return this._shortdescription;
		}
		set
		{
			if ((this._shortdescription != value))
			{
				this.OnshortdescriptionChanging(value);
				this.SendPropertyChanging();
				this._shortdescription = value;
				this.SendPropertyChanged("shortdescription");
				this.OnshortdescriptionChanged();
			}
		}
	}
	
	[Column(Storage="_thumbnailimage", DbType="NVarChar(50)")]
	public string thumbnailimage
	{
		get
		{
			return this._thumbnailimage;
		}
		set
		{
			if ((this._thumbnailimage != value))
			{
				this.OnthumbnailimageChanging(value);
				this.SendPropertyChanging();
				this._thumbnailimage = value;
				this.SendPropertyChanged("thumbnailimage");
				this.OnthumbnailimageChanged();
			}
		}
	}
	
	[Column(Storage="_acitve", DbType="Bit NOT NULL")]
	public bool acitve
	{
		get
		{
			return this._acitve;
		}
		set
		{
			if ((this._acitve != value))
			{
				this.OnacitveChanging(value);
				this.SendPropertyChanging();
				this._acitve = value;
				this.SendPropertyChanged("acitve");
				this.OnacitveChanged();
			}
		}
	}
	
	[Column(Storage="_sortorder", DbType="Int NOT NULL")]
	public int sortorder
	{
		get
		{
			return this._sortorder;
		}
		set
		{
			if ((this._sortorder != value))
			{
				this.OnsortorderChanging(value);
				this.SendPropertyChanging();
				this._sortorder = value;
				this.SendPropertyChanged("sortorder");
				this.OnsortorderChanged();
			}
		}
	}
	
	[Column(Storage="_startdate", DbType="SmallDateTime")]
	public System.Nullable<System.DateTime> startdate
	{
		get
		{
			return this._startdate;
		}
		set
		{
			if ((this._startdate != value))
			{
				this.OnstartdateChanging(value);
				this.SendPropertyChanging();
				this._startdate = value;
				this.SendPropertyChanged("startdate");
				this.OnstartdateChanged();
			}
		}
	}
	
	[Column(Storage="_enddate", DbType="SmallDateTime")]
	public System.Nullable<System.DateTime> enddate
	{
		get
		{
			return this._enddate;
		}
		set
		{
			if ((this._enddate != value))
			{
				this.OnenddateChanging(value);
				this.SendPropertyChanging();
				this._enddate = value;
				this.SendPropertyChanged("enddate");
				this.OnenddateChanged();
			}
		}
	}
	
	[Association(Name="article_article_category", Storage="_article_categories", ThisKey="article_key", OtherKey="article_fkey")]
	public EntitySet<article_category> article_categories
	{
		get
		{
			return this._article_categories;
		}
		set
		{
			this._article_categories.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_article_categories(article_category entity)
	{
		this.SendPropertyChanging();
		entity.article = this;
	}
	
	private void detach_article_categories(article_category entity)
	{
		this.SendPropertyChanging();
		entity.article = null;
	}
}

[Table(Name="dbo.NewsletterReciprients")]
public partial class NewsletterReciprient : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _reciprient_key;
	
	private string _name;
	
	private string _email;
	
	private bool _active;
	
	private bool _confirmed;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onreciprient_keyChanging(int value);
    partial void Onreciprient_keyChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    partial void OnconfirmedChanging(bool value);
    partial void OnconfirmedChanged();
    #endregion
	
	public NewsletterReciprient()
	{
		OnCreated();
	}
	
	[Column(Storage="_reciprient_key", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int reciprient_key
	{
		get
		{
			return this._reciprient_key;
		}
		set
		{
			if ((this._reciprient_key != value))
			{
				this.Onreciprient_keyChanging(value);
				this.SendPropertyChanging();
				this._reciprient_key = value;
				this.SendPropertyChanged("reciprient_key");
				this.Onreciprient_keyChanged();
			}
		}
	}
	
	[Column(Storage="_name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string name
	{
		get
		{
			return this._name;
		}
		set
		{
			if ((this._name != value))
			{
				this.OnnameChanging(value);
				this.SendPropertyChanging();
				this._name = value;
				this.SendPropertyChanged("name");
				this.OnnameChanged();
			}
		}
	}
	
	[Column(Storage="_email", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
	public string email
	{
		get
		{
			return this._email;
		}
		set
		{
			if ((this._email != value))
			{
				this.OnemailChanging(value);
				this.SendPropertyChanging();
				this._email = value;
				this.SendPropertyChanged("email");
				this.OnemailChanged();
			}
		}
	}
	
	[Column(Storage="_active", DbType="Bit NOT NULL")]
	public bool active
	{
		get
		{
			return this._active;
		}
		set
		{
			if ((this._active != value))
			{
				this.OnactiveChanging(value);
				this.SendPropertyChanging();
				this._active = value;
				this.SendPropertyChanged("active");
				this.OnactiveChanged();
			}
		}
	}
	
	[Column(Storage="_confirmed", DbType="Bit NOT NULL")]
	public bool confirmed
	{
		get
		{
			return this._confirmed;
		}
		set
		{
			if ((this._confirmed != value))
			{
				this.OnconfirmedChanging(value);
				this.SendPropertyChanging();
				this._confirmed = value;
				this.SendPropertyChanged("confirmed");
				this.OnconfirmedChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Newsletters")]
public partial class Newsletter : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Newsletter_Key;
	
	private string _Subject;
	
	private string _Body;
	
	private System.Nullable<System.DateTime> _Date_Sent;
	
	private System.DateTime _date_created;
	
	private EntitySet<Newsletter_Link> _Newsletter_Links;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onnewsletter_keyChanging(int value);
    partial void Onnewsletter_keyChanged();
    partial void OnsubjectChanging(string value);
    partial void OnsubjectChanged();
    partial void OnbodyChanging(string value);
    partial void OnbodyChanged();
    partial void Ondate_sentChanging(System.Nullable<System.DateTime> value);
    partial void Ondate_sentChanged();
    partial void Ondate_createdChanging(System.DateTime value);
    partial void Ondate_createdChanged();
    #endregion
	
	public Newsletter()
	{
		this._Newsletter_Links = new EntitySet<Newsletter_Link>(new Action<Newsletter_Link>(this.attach_Newsletter_Links), new Action<Newsletter_Link>(this.detach_Newsletter_Links));
		OnCreated();
	}
	
	[Column(Name="Newsletter_Key", Storage="_Newsletter_Key", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int newsletter_key
	{
		get
		{
			return this._Newsletter_Key;
		}
		set
		{
			if ((this._Newsletter_Key != value))
			{
				this.Onnewsletter_keyChanging(value);
				this.SendPropertyChanging();
				this._Newsletter_Key = value;
				this.SendPropertyChanged("newsletter_key");
				this.Onnewsletter_keyChanged();
			}
		}
	}
	
	[Column(Name="Subject", Storage="_Subject", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string subject
	{
		get
		{
			return this._Subject;
		}
		set
		{
			if ((this._Subject != value))
			{
				this.OnsubjectChanging(value);
				this.SendPropertyChanging();
				this._Subject = value;
				this.SendPropertyChanged("subject");
				this.OnsubjectChanged();
			}
		}
	}
	
	[Column(Name="Body", Storage="_Body", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string body
	{
		get
		{
			return this._Body;
		}
		set
		{
			if ((this._Body != value))
			{
				this.OnbodyChanging(value);
				this.SendPropertyChanging();
				this._Body = value;
				this.SendPropertyChanged("body");
				this.OnbodyChanged();
			}
		}
	}
	
	[Column(Name="Date_Sent", Storage="_Date_Sent", DbType="DateTime")]
	public System.Nullable<System.DateTime> date_sent
	{
		get
		{
			return this._Date_Sent;
		}
		set
		{
			if ((this._Date_Sent != value))
			{
				this.Ondate_sentChanging(value);
				this.SendPropertyChanging();
				this._Date_Sent = value;
				this.SendPropertyChanged("date_sent");
				this.Ondate_sentChanged();
			}
		}
	}
	
	[Column(Storage="_date_created", AutoSync=AutoSync.OnInsert, IsDbGenerated=true)]
	public System.DateTime date_created
	{
		get
		{
			return this._date_created;
		}
		set
		{
			if ((this._date_created != value))
			{
				this.Ondate_createdChanging(value);
				this.SendPropertyChanging();
				this._date_created = value;
				this.SendPropertyChanged("date_created");
				this.Ondate_createdChanged();
			}
		}
	}
	
	[Association(Name="Newsletter_Newsletter_Link", Storage="_Newsletter_Links", ThisKey="newsletter_key", OtherKey="newsletter_key")]
	public EntitySet<Newsletter_Link> Newsletter_Links
	{
		get
		{
			return this._Newsletter_Links;
		}
		set
		{
			this._Newsletter_Links.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Newsletter_Links(Newsletter_Link entity)
	{
		this.SendPropertyChanging();
		entity.Newsletter = this;
	}
	
	private void detach_Newsletter_Links(Newsletter_Link entity)
	{
		this.SendPropertyChanging();
		entity.Newsletter = null;
	}
}

[Table(Name="dbo.Newsletter_Links")]
public partial class Newsletter_Link : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Newsletter_Link_Key;
	
	private int _newsletter_key;
	
	private int _link_key;
	
	private int _link_type_key;
	
	private EntityRef<lookup> _lookup;
	
	private EntityRef<Newsletter> _Newsletter;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNewsletter_Link_KeyChanging(int value);
    partial void OnNewsletter_Link_KeyChanged();
    partial void Onnewsletter_keyChanging(int value);
    partial void Onnewsletter_keyChanged();
    partial void Onlink_keyChanging(int value);
    partial void Onlink_keyChanged();
    partial void Onlink_type_keyChanging(int value);
    partial void Onlink_type_keyChanged();
    #endregion
	
	public Newsletter_Link()
	{
		this._lookup = default(EntityRef<lookup>);
		this._Newsletter = default(EntityRef<Newsletter>);
		OnCreated();
	}
	
	[Column(Storage="_Newsletter_Link_Key", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Newsletter_Link_Key
	{
		get
		{
			return this._Newsletter_Link_Key;
		}
		set
		{
			if ((this._Newsletter_Link_Key != value))
			{
				this.OnNewsletter_Link_KeyChanging(value);
				this.SendPropertyChanging();
				this._Newsletter_Link_Key = value;
				this.SendPropertyChanged("Newsletter_Link_Key");
				this.OnNewsletter_Link_KeyChanged();
			}
		}
	}
	
	[Column(Storage="_newsletter_key", DbType="Int NOT NULL")]
	public int newsletter_key
	{
		get
		{
			return this._newsletter_key;
		}
		set
		{
			if ((this._newsletter_key != value))
			{
				if (this._Newsletter.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onnewsletter_keyChanging(value);
				this.SendPropertyChanging();
				this._newsletter_key = value;
				this.SendPropertyChanged("newsletter_key");
				this.Onnewsletter_keyChanged();
			}
		}
	}
	
	[Column(Storage="_link_key", DbType="Int NOT NULL")]
	public int link_key
	{
		get
		{
			return this._link_key;
		}
		set
		{
			if ((this._link_key != value))
			{
				this.Onlink_keyChanging(value);
				this.SendPropertyChanging();
				this._link_key = value;
				this.SendPropertyChanged("link_key");
				this.Onlink_keyChanged();
			}
		}
	}
	
	[Column(Storage="_link_type_key", DbType="Int NOT NULL")]
	public int link_type_key
	{
		get
		{
			return this._link_type_key;
		}
		set
		{
			if ((this._link_type_key != value))
			{
				if (this._lookup.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.Onlink_type_keyChanging(value);
				this.SendPropertyChanging();
				this._link_type_key = value;
				this.SendPropertyChanged("link_type_key");
				this.Onlink_type_keyChanged();
			}
		}
	}
	
	[Association(Name="lookup_Newsletter_Link", Storage="_lookup", ThisKey="link_type_key", OtherKey="lookup_key", IsForeignKey=true)]
	public lookup lookup
	{
		get
		{
			return this._lookup.Entity;
		}
		set
		{
			lookup previousValue = this._lookup.Entity;
			if (((previousValue != value) 
						|| (this._lookup.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._lookup.Entity = null;
					previousValue.Newsletter_Links.Remove(this);
				}
				this._lookup.Entity = value;
				if ((value != null))
				{
					value.Newsletter_Links.Add(this);
					this._link_type_key = value.lookup_key;
				}
				else
				{
					this._link_type_key = default(int);
				}
				this.SendPropertyChanged("lookup");
			}
		}
	}
	
	[Association(Name="Newsletter_Newsletter_Link", Storage="_Newsletter", ThisKey="newsletter_key", OtherKey="newsletter_key", IsForeignKey=true)]
	public Newsletter Newsletter
	{
		get
		{
			return this._Newsletter.Entity;
		}
		set
		{
			Newsletter previousValue = this._Newsletter.Entity;
			if (((previousValue != value) 
						|| (this._Newsletter.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Newsletter.Entity = null;
					previousValue.Newsletter_Links.Remove(this);
				}
				this._Newsletter.Entity = value;
				if ((value != null))
				{
					value.Newsletter_Links.Add(this);
					this._newsletter_key = value.newsletter_key;
				}
				else
				{
					this._newsletter_key = default(int);
				}
				this.SendPropertyChanged("Newsletter");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
